#!/usr/bin/env zsh

# Tinty isn't able to apply environment variables to your shell due to
# the way shell sub-processes work. This is a work around by running
# Tinty through a function and then executing the shell scripts.
tinty_source_shell_theme() {
  local config_path="$XDG_CONFIG_HOME/tinted-theming/tinty/config.toml"
  local data_path="$XDG_DATA_HOME/tinted-theming/tinty"

  tinty --config="$config_path" --data-dir="$data_path" $@
  subcommand="$1"

  if [ "$subcommand" = "apply" ] || [ "$subcommand" = "init" ]; then
    tinty_data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/tinted-theming/tinty"

    for tinty_script_file in $(find "$tinty_data_dir" -maxdepth 1 -type f -name "*.sh"); do
      . $tinty_script_file
    done

    unset tinty_data_dir
  fi

  unset subcommand
}

setup_rc() {
  local fzf_ansi_script="$PROJECTS_PATH/tinted-theming/tinted-fzf/ansi/ansi.sh";
  if [ -f "$fzf_ansi_script" ]; then
    . "$fzf_ansi_script"
  fi

  tinty init
}

setup_rc