#!/usr/bin/env zsh

# General functions
# ---------------

# Project find/replace strings in files
find_replace () {
  rg "$1"
  if read -n1 -p "choice?Are you sure you? Y/n"; then
    rg "$1" -l | xargs sed -i "s|$1|$2|g"
    echo "\n\"$1\" has replaced \"$2\" successfully"
  else
    echo "\nCancelled"
  fi
}

# Kill port
kp() {
  port_re='^[0-9]{4}$'

  # If arg is a valif port
  if [[ $1 =~ $port_re ]]; then
    pid=$(lsof -ti:$1)

    # And a relevant port id exists
    if [ ! -z $pid ]; then
      # Attempt to kill the port
      echo $pid | xargs kill

      # If the ports pid still exists alert the user
      updated_pid=$(lsof -ti:$1)
      if [ -z $updated_pid ]; then
        echo "Port $1 has been killed successfully"
      else
        echo "Something went wrong, try manually running \`lsof -ti:$1 | xargs kill -9\`"
      fi
    else
      echo "No matching port: $1"
    fi
  else
    echo "error: Not a port number" >&2;
  fi
}

# Git functions
# -------------

# Git Primary BRanch - returns `master` or `main`
gpbr() {
  if [ -n "$(git branch | grep main)" ]; then
    echo 'main'
  elif [ -n "$(git branch | grep master)" ]; then
    echo 'master'
  fi
}

# Git checkout local branch with fzf (ch - CHeckout)
gch() {
  git checkout "$(git branch | fzf | tr -d '[:space:]')"
}

# Git clean already rebased branches (cb - CleanBranches)
gcb() {
  branches=$(git branch --merged | grep -Ev "(\*|main|master|develop)")

  if [ -z "$branches" ]; then
    echo "There are no branches to delete"
    return
  fi

  echo $branches | xargs git branch -d
}

# Git reset main branch to origin/main (rho - ResetHomeOrigin)
grho() {
  primary_branch_name=$(gpbr)

  # The user must first stash files
  if [ -n "$(git status | grep 'modified')" ]; then
    echo "This will reset your unstaged files. Please first stash your files."
    git st
    return
  fi

  git checkout "$primary_branch_name"
  git fetch
  git reset --hard "origin/$primary_branch_name";
}

# Git rebase current branch with origin/main
gsync() {
  primary_branch_name=$(gpbr)

  if [ -n "$(git status | grep 'modified')" ]; then
    git stash
  fi

  grho
  git checkout -
  git rebase "$primary_branch_name"
  git stash pop
}

# Interactive rebase with (as - AutoSquash)
gas() {
  primary_branch_name=$(gpbr)

  git rebase -i --autosquash $primary_branch_name
}

# List git branches by most recent branch commit (gbr - GitBRanchRecent)
# https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
gbrr() {
  primary_branch_name=$(gpbr)
  refbranch=${1:-origin/$primary_branch_name}
  count=$2

  git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line;
  do branch=$(echo "$line" | awk 'BEGIN { FS = "|" }; { print $1 }' | tr -d '*');
    ahead=$(git rev-list --count "$refbranch..$branch");
    behind=$(git rev-list --count "$branch..$refbranch");
    colorline=$(echo "$line" | sed 's/^[^|]*|//');

    echo "$ahead|$behind|$colorline" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1';
  done | ( echo "ahead|behind||branch|lastcommit|message|author\n" && cat) | column -ts'|';
}
